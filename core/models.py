from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.views.generic import TemplateView
from django.core.paginator import Paginator
from django.db.models import Q
from django.views import View
from django.contrib.auth import login
from django.contrib.auth.forms import AuthenticationForm
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.db import transaction
from django.contrib.auth import update_session_auth_hash
from django.utils import timezone
import requests
from django.conf import settings
import os
import shutil
import pytz
from django.core import management
from datetime import datetime

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True)
    position = models.CharField(max_length=100, blank=True, null=True)
    phone = models.CharField(max_length=20, blank=True, null=True)
    address = models.TextField(blank=True, null=True)
    telegram_id = models.CharField(max_length=100, blank=True, null=True)
    two_factor_enabled = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f'Profile of {self.user.username}'

    @property
    def full_name(self):
        return f'{self.user.first_name} {self.user.last_name}'.strip()

    def get_user_group(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None"""
        return self.user.groups.first()

    def get_group_icon(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        group = self.get_user_group()
        if group:
            icons = {
                '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 'bi-person-fill-gear',
                '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫': 'bi-code-square',
                '–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä': 'bi-briefcase-fill',
                '–ú–µ–Ω–µ–¥–∂–µ—Ä': 'bi-person-lines-fill'
            }
            return icons.get(group.name, 'bi-person-circle')
        return 'bi-person-circle'

    @property
    def telegram_username(self):
        return self.telegram_id if self.telegram_id else None


class Shipment(models.Model):
    STATUS_CHOICES = [
        ('created', 'üìù –°–æ–∑–¥–∞–Ω–æ'),
        ('processing', 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('transit', 'üöö –í –ø—É—Ç–∏'),
        ('delivered', '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'),
        ('problem', '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞'),
    ]

    TYPE_CHOICES = [
        ('send', 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞'),
        ('receive', 'üì• –ü–æ–ª—É—á–µ–Ω–∏–µ'),
    ]

    id = models.CharField(primary_key=True, max_length=50)
    user = models.ForeignKey(User, on_delete=models.CASCADE, db_column='user_id')
    type = models.CharField(max_length=10, choices=TYPE_CHOICES)
    waybill_number = models.CharField(max_length=50)
    city = models.CharField(max_length=100)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='created')
    comment = models.TextField(blank=True, null=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    waybill_photo = models.CharField(max_length=255, blank=True, null=True)
    product_photo = models.CharField(max_length=255, blank=True, null=True)
    telegram_waybill_file_id = models.CharField(max_length=255, blank=True, null=True)
    telegram_product_file_id = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        db_table = 'shipments'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
        verbose_name = 'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
        verbose_name_plural = 'üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.get_type_display()} #{self.waybill_number}"

    def get_status_display(self):
        status_map = {
            'created': 'üìù –°–æ–∑–¥–∞–Ω–æ',
            'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'transit': 'üöö –í –ø—É—Ç–∏',
            'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
            'problem': '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞'
        }
        return status_map.get(self.status, self.status)

    def get_verbose_status(self):
        status_icons = {
            'created': 'üìù',
            'processing': 'üîÑ',
            'transit': 'üöö',
            'delivered': '‚úÖ',
            'problem': '‚ö†Ô∏è'
        }
        return f"{status_icons.get(self.status, '')} {self.get_status_display()}"

    def clean(self):
        super().clean()
        errors = {}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        if not self.waybill_number:
            errors['waybill_number'] = '–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞
        if not self.city:
            errors['city'] = '–ì–æ—Ä–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'

        if errors:
            from django.core.exceptions import ValidationError
            raise ValidationError(errors)

    def save(self, *args, **kwargs):
        self.full_clean()  # –í—ã–∑—ã–≤–∞–µ—Ç clean() –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        super().save(*args, **kwargs)


class UserActivity(models.Model):
    ACTION_CHOICES = [
        ('LOGIN', 'üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'),
        ('LOGOUT', 'üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'),
        ('PROFILE_UPDATE', 'üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è'),
        ('PASSWORD_CHANGE', 'üîí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è'),
        ('BOT_TEST', 'ü§ñ –¢–µ—Å—Ç –±–æ—Ç–∞'),
        ('SHIPMENT_CREATE', 'üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏'),
        ('SHIPMENT_UPDATE', '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏'),
        ('SHIPMENT_DELETE', '‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏'),
        ('BACKUP_CREATE', 'üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='activities')
    action_type = models.CharField(max_length=20, choices=ACTION_CHOICES)
    description = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    metadata = models.JSONField(default=dict, blank=True)

    class Meta:
        verbose_name = '–õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        verbose_name_plural = '–õ–æ–≥–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
        ordering = ['-timestamp']
        indexes = [
            models.Index(fields=['-timestamp']),
            models.Index(fields=['user']),
        ]

    def __str__(self):
        return f"{self.get_action_type_display()} - {self.user.username}"

    @property
    def formatted_timestamp(self):
        return self.timestamp.strftime("%d.%m.%Y %H:%M:%S")

    @property
    def user_display_name(self):
        if self.user.first_name and self.user.last_name:
            return f"{self.user.first_name} {self.user.last_name}"
        return self.user.username

    @property
    def icon(self):
        icons = {
            'LOGIN': 'bi-box-arrow-in-right',
            'LOGOUT': 'bi-box-arrow-right',
            'PROFILE_UPDATE': 'bi-person-lines-fill',
            'PASSWORD_CHANGE': 'bi-shield-lock',
            'BOT_TEST': 'bi-robot',
            'SHIPMENT_CREATE': 'bi-plus-square',
            'SHIPMENT_UPDATE': 'bi-pencil-square',
            'SHIPMENT_DELETE': 'bi-trash',
            'BACKUP_CREATE': 'bi-save',
        }
        return icons.get(self.action_type, 'bi-info-circle')

    @property
    def color(self):
        color_map = {
            'LOGIN': 'success',
            'LOGOUT': 'secondary',
            'PROFILE_UPDATE': 'primary',
            'PASSWORD_CHANGE': 'warning',
            'AVATAR_CHANGE': 'info',
            'SHIPMENT_CREATE': 'success',
            'SHIPMENT_UPDATE': 'primary',
            'SHIPMENT_DELETE': 'danger',
            'SHIPMENT_STATUS': 'info',
            'SHIPMENT_VIEW': 'secondary',
            '2FA_TOGGLE': 'warning'
        }
        return color_map.get(self.action_type, 'secondary')


def format_message(header_icon, header_text, items, footer=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ"""
    message = [
        f"{header_icon} <b>{header_text}</b>",
        "‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨"
    ]

    for item in items:
        message.append(f"‚Ä¢ <b>{item['label']}:</b> {item['value']}")

    if footer:
        message.append(f"‚Ä¢ <b>{footer['label']}:</b> {footer['value']}")

    message.append("‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨")
    return "\n".join(message)


def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not all([settings.TELEGRAM_BOT_TOKEN, settings.TELEGRAM_LOG_CHAT_ID]):
        print("‚ö†Ô∏è Telegram credentials not configured")
        return False

    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": settings.TELEGRAM_LOG_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }

    try:
        response = requests.post(url, json=payload, timeout=5)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def backup_database():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        backup_dir = os.path.join(settings.BASE_DIR, 'backups')
        os.makedirs(backup_dir, exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
        timestamp = datetime.now(pytz.timezone('Europe/Moscow')).strftime("%Y%m%d_%H%M")
        backup_name = f"db_backup_{timestamp}.json"
        backup_path = os.path.join(backup_dir, backup_name)

        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        with open(backup_path, 'w', encoding='utf-8') as f:
            management.call_command('dumpdata', exclude=['contenttypes', 'auth.permission'], stdout=f)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        items = [
            {'label': '–§–∞–π–ª', 'value': f"<code>{backup_name}</code>"},
            {'label': '–†–∞–∑–º–µ—Ä', 'value': f"{os.path.getsize(backup_path) / 1024:.1f} KB"}
        ]

        footer = {
            'label': '–î–∞—Ç–∞',
            'value': timestamp.replace('_', ' ')
        }

        message = format_message("üíæ", "–ë–ê–ó–ê –î–ê–ù–ù–´–• –°–û–•–†–ê–ù–ï–ù–ê", items, footer)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not send_telegram_message(message):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")

        return True

    except Exception as e:
        error_items = [{'label': '–û—à–∏–±–∫–∞', 'value': str(e)}]
        error_message = format_message("‚ö†Ô∏è", "–û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ë–ê–ó–´", error_items)
        send_telegram_message(error_message)
        return False


@receiver(post_save, sender=Shipment)
def notify_shipment_save(sender, instance, created, **kwargs):
    action_icon = "üÜï" if created else "üîÑ"
    action_text = "–ù–û–í–û–ï –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï" if created else "–û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–û"

    items = [
        {'label': 'ID', 'value': f"<code>{instance.id}</code>"},
        {'label': '–¢–∏–ø', 'value': instance.get_type_display()},
        {'label': '–ù–∞–∫–ª–∞–¥–Ω–∞—è', 'value': instance.waybill_number},
        {'label': '–ì–æ—Ä–æ–¥', 'value': instance.city},
        {'label': '–°—Ç–∞—Ç—É—Å', 'value': instance.get_verbose_status()}
    ]

    footer = {
        'label': '–î–∞—Ç–∞',
        'value': datetime.now().strftime('%d.%m.%Y %H:%M')
    }

    message = format_message(action_icon, action_text, items, footer)
    send_telegram_message(message)


@receiver(post_delete, sender=Shipment)
def notify_shipment_delete(sender, instance, **kwargs):
    items = [
        {'label': 'ID', 'value': f"<code>{instance.id}</code>"},
        {'label': '–ù–∞–∫–ª–∞–¥–Ω–∞—è', 'value': instance.waybill_number},
        {'label': '–ì–æ—Ä–æ–¥', 'value': instance.city}
    ]

    footer = {
        'label': '–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è',
        'value': datetime.now().strftime('%d.%m.%Y %H:%M')
    }

    message = format_message("üóëÔ∏è", "–û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –£–î–ê–õ–ï–ù–û", items, footer)
    send_telegram_message(message)


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)
        UserActivity.log_activity(
            user=instance,
            action_type='PROFILE_CREATE',
            description='–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω'
        )


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    if hasattr(instance, 'profile'):
        instance.profile.save()