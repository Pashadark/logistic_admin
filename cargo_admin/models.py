from django.db import models
import requests
from django.conf import settings
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver


class Shipment(models.Model):
    STATUS_CHOICES = [
        ('created', 'üìù –°–æ–∑–¥–∞–Ω–æ'),
        ('processing', 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
        ('transit', 'üöö –í –ø—É—Ç–∏'),
        ('delivered', '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'),
        ('problem', '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞'),
    ]

    def get_status_display(self):
        status_map = {
            'created': 'üìù –°–æ–∑–¥–∞–Ω–æ',
            'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'transit': 'üöö –í –ø—É—Ç–∏',
            'delivered': '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
            'problem': '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞'
        }
        return status_map.get(self.status, self.status)
    OPERATION_TYPES = [
        ('send', '–û—Ç–ø—Ä–∞–≤–∫–∞'),
        ('receive', '–ü–æ–ª—É—á–µ–Ω–∏–µ'),
    ]

    id = models.CharField(max_length=36, primary_key=True)
    user_id = models.BigIntegerField()
    type = models.CharField(max_length=10, choices=OPERATION_TYPES)
    waybill_photo = models.CharField(max_length=255)
    product_photo = models.CharField(max_length=255)
    waybill_number = models.CharField(max_length=100)
    city = models.CharField(max_length=100)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='created')
    comment = models.TextField(blank=True, null=True)
    timestamp = models.DateTimeField()

    class Meta:
        db_table = 'shipments'
        verbose_name = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
        verbose_name_plural = '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        ordering = ['-timestamp']

    def __str__(self):
        return f"{self.get_type_display()} #{self.waybill_number}"


@receiver(post_save, sender=Shipment)
def log_shipment_save(sender, instance, created, **kwargs):
    action = "—Å–æ–∑–¥–∞–Ω–æ" if created else "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"
    message = (
        f"üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {action}:\n"
        f"ID: {instance.id}\n"
        f"–¢–∏–ø: {instance.get_type_display()}\n"
        f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {instance.waybill_number}\n"
        f"–ì–æ—Ä–æ–¥: {instance.city}\n"
        f"–°—Ç–∞—Ç—É—Å: {instance.get_status_display()}"
    )
    send_telegram_message(message)


@receiver(post_delete, sender=Shipment)
def log_shipment_delete(sender, instance, **kwargs):
    message = (
        f"üóëÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ:\n"
        f"ID: {instance.id}\n"
        f"–ù–∞–∫–ª–∞–¥–Ω–∞—è: {instance.waybill_number}\n"
        f"–ì–æ—Ä–æ–¥: {instance.city}"
    )
    send_telegram_message(message)


def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": settings.TELEGRAM_LOG_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, json=payload, timeout=5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")